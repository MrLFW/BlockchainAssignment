diff --git a/Blockchain Build Cookbook (2).pptx b/Blockchain Build Cookbook.pptx
similarity index 100%
rename from Blockchain Build Cookbook (2).pptx
rename to Blockchain Build Cookbook.pptx
diff --git a/BlockchainAssignment/Block.cs b/BlockchainAssignment/Block.cs
index d0ee88b..8bf7b6c 100644
--- a/BlockchainAssignment/Block.cs
+++ b/BlockchainAssignment/Block.cs
@@ -1,8 +1,10 @@
 ï»¿using System;
 using System.Collections.Generic;
+using System.Diagnostics;
 using System.Linq;
 using System.Security.Cryptography;
 using System.Text;
+using System.Threading;
 
 namespace BlockchainAssignment
 {
@@ -12,7 +14,8 @@ namespace BlockchainAssignment
         private DateTime timestamp; // Time of creation
 
         private int index, // Position of the block in the sequence of blocks
-            difficulty = 4; // An arbitrary number of 0's to proceed a hash value
+            difficulty,
+            prevDifficulty; // An arbitrary number of 0's to proceed a hash value
 
         public String prevHash, // A reference pointer to the previous block
             hash, // The current blocks "identity"
@@ -26,23 +29,33 @@ namespace BlockchainAssignment
 
         // Rewards
         public double reward; // Simple fixed reward established by "Coinbase"
+        private double targetBlockTime = 15; // Target time between blocks in seconds
+        private double miningTime;
+        public double prevMiningTime; // Time taken to mine the previous block
+        private string threadingType;
+        const int threadCount = 4; // Hard-coded number of threads
 
         /* Genesis block constructor */
         public Block()
         {
             timestamp = DateTime.Now;
             index = 0;
+            prevMiningTime = 0;
+            difficulty = 4;
             transactionList = new List<Transaction>();
-            hash = Mine();
+            hash = MineMultiThreaded();
         }
 
         /* New Block constructor */
-        public Block(Block lastBlock, List<Transaction> transactions, String minerAddress)
+        public Block(Block lastBlock, List<Transaction> transactions, String minerAddress, bool multithreaded)
         {
             timestamp = DateTime.Now;
 
             index = lastBlock.index + 1;
             prevHash = lastBlock.hash;
+            prevMiningTime = lastBlock.miningTime;
+            prevDifficulty = lastBlock.difficulty;
+            difficulty = CalculateDifficulty();
 
             this.minerAddress = minerAddress; // The wallet to be credited the reward for the mining effort
             reward = 1.0; // Assign a simple fixed value reward
@@ -50,11 +63,16 @@ namespace BlockchainAssignment
             transactionList = new List<Transaction>(transactions); // Assign provided transactions to the block
 
             merkleRoot = MerkleRoot(transactionList); // Calculate the merkle root of the blocks transactions
-            hash = Mine(); // Conduct PoW to create a hash which meets the given difficulty requirement
+            hash = multithreaded ? MineMultiThreaded() : Mine(); // Conduct PoW to create a hash which meets the given difficulty requirement
+        }
+
+        private int CalculateDifficulty()
+        {
+            return prevMiningTime < targetBlockTime ? prevDifficulty + 1 : prevDifficulty - 1;
         }
 
         /* Hashes the entire Block object */
-        public String CreateHash()
+        public String CreateHash(long nonce)
         {
             String hash = String.Empty;
             SHA256 hasher = SHA256Managed.Create();
@@ -73,19 +91,78 @@ namespace BlockchainAssignment
         }
 
         // Create a Hash which satisfies the difficulty level required for PoW
+        public String MineMultiThreaded()
+        {
+            var stopwatch = Stopwatch.StartNew();
+            Thread[] miners = new Thread[threadCount];
+            bool found = false;
+            String finalHash = String.Empty;
+            long successfulNonce = 0;
+
+            String re = new string('0', difficulty); // A string for analysing the PoW requirement
+
+            object lockObject = new object();
+
+            void MineThread(object threadId)
+            {
+                long threadNonce = (int)threadId; // TODO check we can cast to int then set as long
+                String hash;
+
+                while (!found)
+                {
+                    hash = CreateHash(threadNonce);
+
+                    if (hash.StartsWith(re))
+                    {
+                        lock (lockObject)
+                        {
+                            if (!found)
+                            {
+                                found = true;
+                                finalHash = hash;
+                                successfulNonce = threadNonce;
+                            }
+                        }
+                        break;
+                    }
+                    threadNonce += threadCount;
+                }
+            }
+
+            for (int i = 0; i < threadCount; i++)
+            {
+                miners[i] = new Thread(MineThread);
+                miners[i].Start(i);
+            }
+
+            foreach (var thread in miners)
+            {
+                thread.Join();
+            }
+
+            nonce = successfulNonce;
+            stopwatch.Stop();
+            miningTime = stopwatch.Elapsed.TotalSeconds;
+            threadingType = "Multi";
+            return finalHash;
+        }
+
         public String Mine()
         {
+            var stopwatch = Stopwatch.StartNew();
             nonce = 0; // Initalise the nonce
-            String hash = CreateHash(); // Hash the block
-
+            String hash = CreateHash(nonce); // Hash the block
             String re = new string('0', difficulty); // A string for analysing the PoW requirement
 
             while (!hash.StartsWith(re)) // Check the resultant hash against the "re" string
             {
                 nonce++; // Increment the nonce should the difficulty level not be satisfied
-                hash = CreateHash(); // Rehash with the new nonce as to generate a different hash
+                hash = CreateHash(nonce); // Rehash with the new nonce as to generate a different hash
             }
 
+            stopwatch.Stop();
+            miningTime = stopwatch.Elapsed.TotalSeconds;
+            threadingType = "Single";
             return hash; // Return the hash meeting the difficulty requirement
         }
 
@@ -141,13 +218,15 @@ namespace BlockchainAssignment
                 + "\nDifficulty Level: " + difficulty
                 + "\nNonce: " + nonce
                 + "\nHash: " + hash
+                + $"\nMining Time: {miningTime:F3} seconds"
+                + "\nThreading Type: " + threadingType
                 + "\n-- Rewards --"
                 + "\nReward: " + reward
                 + "\nMiners Address: " + minerAddress
                 + "\n-- " + transactionList.Count + " Transactions --"
                 + "\nMerkle Root: " + merkleRoot
                 + "\n" + String.Join("\n", transactionList)
-                + "\n[BLOCK END]";
+                + "\n[BLOCK END]\n";
         }
     }
 }
diff --git a/BlockchainAssignment/Blockchain.cs b/BlockchainAssignment/Blockchain.cs
index fc16914..47a2cd8 100644
--- a/BlockchainAssignment/Blockchain.cs
+++ b/BlockchainAssignment/Blockchain.cs
@@ -43,11 +43,33 @@ namespace BlockchainAssignment
         }
 
         // Retrieve pending transactions and remove from pool
-        public List<Transaction> GetPendingTransactions()
+        public List<Transaction> GetPendingTransactions(MiningMode mode)
         {
             // Determine the number of transactions to retrieve dependent on the number of pending transactions and the limit specified
             int n = Math.Min(transactionsPerBlock, transactionPool.Count);
 
+            if (mode == MiningMode.Greedy)
+            {
+                transactionPool.Sort((x, y) => y.fee.CompareTo(x.fee));
+            }
+            else if (mode == MiningMode.Altruistic)
+            {
+                transactionPool.Sort((x, y) => x.timestamp.CompareTo(y.timestamp));
+            }
+            else if (mode == MiningMode.Random)
+            {
+                Random rng = new Random();
+                int i = transactionPool.Count;
+                while (i > 1)
+                {
+                    i--;
+                    int k = rng.Next(i + 1);
+                    Transaction value = transactionPool[k]; // swap the values around
+                    transactionPool[k] = transactionPool[i];
+                    transactionPool[i] = value;
+                }
+            }
+
             // "Pull" transactions from the transaction list (modifying the original list)
             List<Transaction> transactions = transactionPool.GetRange(0, n);
             transactionPool.RemoveRange(0, n);
@@ -59,7 +81,7 @@ namespace BlockchainAssignment
         // Check validity of a blocks hash by recomputing the hash and comparing with the mined value
         public static bool ValidateHash(Block b)
         {
-            String rehash = b.CreateHash();
+            String rehash = b.CreateHash(b.nonce);
             return rehash.Equals(b.hash);
         }
 
diff --git a/BlockchainAssignment/BlockchainApp.Designer.cs b/BlockchainAssignment/BlockchainApp.Designer.cs
index 7465c58..bb4a342 100644
--- a/BlockchainAssignment/BlockchainApp.Designer.cs
+++ b/BlockchainAssignment/BlockchainApp.Designer.cs
@@ -44,7 +44,7 @@
             this.amountLabel = new System.Windows.Forms.Label();
             this.reciever = new System.Windows.Forms.TextBox();
             this.recieverKeyLabel = new System.Windows.Forms.Label();
-            this.newBlock = new System.Windows.Forms.Button();
+            this.newBlockMultiThread = new System.Windows.Forms.Button();
             this.printBlockchain = new System.Windows.Forms.Button();
             this.readPendingTransactions = new System.Windows.Forms.Button();
             this.validate = new System.Windows.Forms.Button();
@@ -53,24 +53,31 @@
             this.transactionLabel = new System.Windows.Forms.Label();
             this.blocksLabel = new System.Windows.Forms.Label();
             this.validationLabel = new System.Windows.Forms.Label();
+            this.newBlockSingleThread = new System.Windows.Forms.Button();
+            this.label1 = new System.Windows.Forms.Label();
+            this.GreedyButton = new System.Windows.Forms.RadioButton();
+            this.AltruisticButton = new System.Windows.Forms.RadioButton();
+            this.RandomButton = new System.Windows.Forms.RadioButton();
+            this.groupBox1 = new System.Windows.Forms.GroupBox();
+            this.groupBox1.SuspendLayout();
             this.SuspendLayout();
             // 
             // output
             // 
             this.output.BackColor = System.Drawing.SystemColors.InfoText;
             this.output.ForeColor = System.Drawing.SystemColors.ButtonHighlight;
-            this.output.Location = new System.Drawing.Point(18, 18);
-            this.output.Margin = new System.Windows.Forms.Padding(4, 5, 4, 5);
+            this.output.Location = new System.Drawing.Point(12, 12);
             this.output.Name = "output";
-            this.output.Size = new System.Drawing.Size(688, 341);
+            this.output.Size = new System.Drawing.Size(460, 602);
             this.output.TabIndex = 0;
             this.output.Text = "";
             // 
             // printBlock
             // 
-            this.printBlock.Location = new System.Drawing.Point(716, 99);
+            this.printBlock.Location = new System.Drawing.Point(486, 121);
+            this.printBlock.Margin = new System.Windows.Forms.Padding(2);
             this.printBlock.Name = "printBlock";
-            this.printBlock.Size = new System.Drawing.Size(99, 39);
+            this.printBlock.Size = new System.Drawing.Size(66, 25);
             this.printBlock.TabIndex = 1;
             this.printBlock.Text = "Block #";
             this.printBlock.UseVisualStyleBackColor = true;
@@ -78,16 +85,18 @@
             // 
             // blockNo
             // 
-            this.blockNo.Location = new System.Drawing.Point(821, 105);
+            this.blockNo.Location = new System.Drawing.Point(556, 124);
+            this.blockNo.Margin = new System.Windows.Forms.Padding(2);
             this.blockNo.Name = "blockNo";
-            this.blockNo.Size = new System.Drawing.Size(34, 26);
+            this.blockNo.Size = new System.Drawing.Size(24, 20);
             this.blockNo.TabIndex = 2;
             // 
             // generateWallet
             // 
-            this.generateWallet.Location = new System.Drawing.Point(38, 411);
+            this.generateWallet.Location = new System.Drawing.Point(11, 660);
+            this.generateWallet.Margin = new System.Windows.Forms.Padding(2);
             this.generateWallet.Name = "generateWallet";
-            this.generateWallet.Size = new System.Drawing.Size(119, 84);
+            this.generateWallet.Size = new System.Drawing.Size(79, 55);
             this.generateWallet.TabIndex = 3;
             this.generateWallet.Text = "Generate New Wallet";
             this.generateWallet.UseVisualStyleBackColor = true;
@@ -96,40 +105,45 @@
             // publicKeyLabel
             // 
             this.publicKeyLabel.AutoSize = true;
-            this.publicKeyLabel.Location = new System.Drawing.Point(169, 430);
+            this.publicKeyLabel.Location = new System.Drawing.Point(120, 674);
+            this.publicKeyLabel.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
             this.publicKeyLabel.Name = "publicKeyLabel";
-            this.publicKeyLabel.Size = new System.Drawing.Size(81, 20);
+            this.publicKeyLabel.Size = new System.Drawing.Size(57, 13);
             this.publicKeyLabel.TabIndex = 4;
             this.publicKeyLabel.Text = "Public Key";
             // 
             // privateKeyLabel
             // 
             this.privateKeyLabel.AutoSize = true;
-            this.privateKeyLabel.Location = new System.Drawing.Point(163, 462);
+            this.privateKeyLabel.Location = new System.Drawing.Point(120, 698);
+            this.privateKeyLabel.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
             this.privateKeyLabel.Name = "privateKeyLabel";
-            this.privateKeyLabel.Size = new System.Drawing.Size(87, 20);
+            this.privateKeyLabel.Size = new System.Drawing.Size(61, 13);
             this.privateKeyLabel.TabIndex = 5;
             this.privateKeyLabel.Text = "Private Key";
             // 
             // publicKey
             // 
-            this.publicKey.Location = new System.Drawing.Point(253, 424);
+            this.publicKey.Location = new System.Drawing.Point(185, 671);
+            this.publicKey.Margin = new System.Windows.Forms.Padding(2);
             this.publicKey.Name = "publicKey";
-            this.publicKey.Size = new System.Drawing.Size(282, 26);
+            this.publicKey.Size = new System.Drawing.Size(187, 20);
             this.publicKey.TabIndex = 6;
             // 
             // privateKey
             // 
-            this.privateKey.Location = new System.Drawing.Point(256, 456);
+            this.privateKey.Location = new System.Drawing.Point(185, 695);
+            this.privateKey.Margin = new System.Windows.Forms.Padding(2);
             this.privateKey.Name = "privateKey";
-            this.privateKey.Size = new System.Drawing.Size(279, 26);
+            this.privateKey.Size = new System.Drawing.Size(187, 20);
             this.privateKey.TabIndex = 7;
             // 
             // validateKeys
             // 
-            this.validateKeys.Location = new System.Drawing.Point(550, 421);
+            this.validateKeys.Location = new System.Drawing.Point(376, 669);
+            this.validateKeys.Margin = new System.Windows.Forms.Padding(2);
             this.validateKeys.Name = "validateKeys";
-            this.validateKeys.Size = new System.Drawing.Size(131, 34);
+            this.validateKeys.Size = new System.Drawing.Size(87, 22);
             this.validateKeys.TabIndex = 8;
             this.validateKeys.Text = "Validate Keys";
             this.validateKeys.UseVisualStyleBackColor = true;
@@ -137,9 +151,10 @@
             // 
             // createTransaction
             // 
-            this.createTransaction.Location = new System.Drawing.Point(714, 269);
+            this.createTransaction.Location = new System.Drawing.Point(486, 288);
+            this.createTransaction.Margin = new System.Windows.Forms.Padding(2);
             this.createTransaction.Name = "createTransaction";
-            this.createTransaction.Size = new System.Drawing.Size(293, 40);
+            this.createTransaction.Size = new System.Drawing.Size(196, 26);
             this.createTransaction.TabIndex = 9;
             this.createTransaction.Text = "Create Transaction";
             this.createTransaction.UseVisualStyleBackColor = true;
@@ -147,67 +162,75 @@
             // 
             // fee
             // 
-            this.fee.Location = new System.Drawing.Point(956, 206);
+            this.fee.Location = new System.Drawing.Point(646, 240);
+            this.fee.Margin = new System.Windows.Forms.Padding(2);
             this.fee.Name = "fee";
-            this.fee.Size = new System.Drawing.Size(52, 26);
+            this.fee.Size = new System.Drawing.Size(36, 20);
             this.fee.TabIndex = 13;
             // 
             // amount
             // 
-            this.amount.Location = new System.Drawing.Point(831, 206);
+            this.amount.Location = new System.Drawing.Point(577, 240);
+            this.amount.Margin = new System.Windows.Forms.Padding(2);
             this.amount.Name = "amount";
-            this.amount.Size = new System.Drawing.Size(52, 26);
+            this.amount.Size = new System.Drawing.Size(36, 20);
             this.amount.TabIndex = 12;
             // 
             // feeLabel
             // 
             this.feeLabel.AutoSize = true;
-            this.feeLabel.Location = new System.Drawing.Point(913, 209);
+            this.feeLabel.Location = new System.Drawing.Point(617, 243);
+            this.feeLabel.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
             this.feeLabel.Name = "feeLabel";
-            this.feeLabel.Size = new System.Drawing.Size(37, 20);
+            this.feeLabel.Size = new System.Drawing.Size(25, 13);
             this.feeLabel.TabIndex = 11;
             this.feeLabel.Text = "Fee";
             // 
             // amountLabel
             // 
             this.amountLabel.AutoSize = true;
-            this.amountLabel.Location = new System.Drawing.Point(760, 209);
+            this.amountLabel.Location = new System.Drawing.Point(530, 243);
+            this.amountLabel.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
             this.amountLabel.Name = "amountLabel";
-            this.amountLabel.Size = new System.Drawing.Size(65, 20);
+            this.amountLabel.Size = new System.Drawing.Size(43, 13);
             this.amountLabel.TabIndex = 10;
             this.amountLabel.Text = "Amount";
             // 
             // reciever
             // 
-            this.reciever.Location = new System.Drawing.Point(831, 237);
+            this.reciever.Location = new System.Drawing.Point(563, 264);
+            this.reciever.Margin = new System.Windows.Forms.Padding(2);
             this.reciever.Name = "reciever";
-            this.reciever.Size = new System.Drawing.Size(177, 26);
+            this.reciever.Size = new System.Drawing.Size(119, 20);
             this.reciever.TabIndex = 15;
             // 
             // recieverKeyLabel
             // 
             this.recieverKeyLabel.AutoSize = true;
-            this.recieverKeyLabel.Location = new System.Drawing.Point(724, 240);
+            this.recieverKeyLabel.Location = new System.Drawing.Point(488, 267);
+            this.recieverKeyLabel.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
             this.recieverKeyLabel.Name = "recieverKeyLabel";
-            this.recieverKeyLabel.Size = new System.Drawing.Size(101, 20);
+            this.recieverKeyLabel.Size = new System.Drawing.Size(71, 13);
             this.recieverKeyLabel.TabIndex = 14;
             this.recieverKeyLabel.Text = "Reciever Key";
             // 
-            // newBlock
+            // newBlockMultiThread
             // 
-            this.newBlock.Location = new System.Drawing.Point(717, 51);
-            this.newBlock.Name = "newBlock";
-            this.newBlock.Size = new System.Drawing.Size(294, 40);
-            this.newBlock.TabIndex = 16;
-            this.newBlock.Text = "Generate New Block";
-            this.newBlock.UseVisualStyleBackColor = true;
-            this.newBlock.Click += new System.EventHandler(this.NewBlock_Click);
+            this.newBlockMultiThread.Location = new System.Drawing.Point(485, 91);
+            this.newBlockMultiThread.Margin = new System.Windows.Forms.Padding(2);
+            this.newBlockMultiThread.Name = "newBlockMultiThread";
+            this.newBlockMultiThread.Size = new System.Drawing.Size(197, 26);
+            this.newBlockMultiThread.TabIndex = 16;
+            this.newBlockMultiThread.Text = "Generate New Block (Multi Thread)";
+            this.newBlockMultiThread.UseVisualStyleBackColor = true;
+            this.newBlockMultiThread.Click += new System.EventHandler(this.newBlockMultiThread_Click);
             // 
             // printBlockchain
             // 
-            this.printBlockchain.Location = new System.Drawing.Point(862, 99);
+            this.printBlockchain.Location = new System.Drawing.Point(584, 121);
+            this.printBlockchain.Margin = new System.Windows.Forms.Padding(2);
             this.printBlockchain.Name = "printBlockchain";
-            this.printBlockchain.Size = new System.Drawing.Size(148, 39);
+            this.printBlockchain.Size = new System.Drawing.Size(98, 25);
             this.printBlockchain.TabIndex = 17;
             this.printBlockchain.Text = "Entire Chain";
             this.printBlockchain.UseVisualStyleBackColor = true;
@@ -215,9 +238,10 @@
             // 
             // readPendingTransactions
             // 
-            this.readPendingTransactions.Location = new System.Drawing.Point(713, 320);
+            this.readPendingTransactions.Location = new System.Drawing.Point(486, 318);
+            this.readPendingTransactions.Margin = new System.Windows.Forms.Padding(2);
             this.readPendingTransactions.Name = "readPendingTransactions";
-            this.readPendingTransactions.Size = new System.Drawing.Size(294, 39);
+            this.readPendingTransactions.Size = new System.Drawing.Size(196, 25);
             this.readPendingTransactions.TabIndex = 18;
             this.readPendingTransactions.Text = "Read Pending Transactions";
             this.readPendingTransactions.UseVisualStyleBackColor = true;
@@ -225,9 +249,10 @@
             // 
             // validate
             // 
-            this.validate.Location = new System.Drawing.Point(713, 424);
+            this.validate.Location = new System.Drawing.Point(486, 669);
+            this.validate.Margin = new System.Windows.Forms.Padding(2);
             this.validate.Name = "validate";
-            this.validate.Size = new System.Drawing.Size(294, 71);
+            this.validate.Size = new System.Drawing.Size(196, 46);
             this.validate.TabIndex = 19;
             this.validate.Text = "Full Blockchain Validation";
             this.validate.UseVisualStyleBackColor = true;
@@ -235,9 +260,10 @@
             // 
             // checkBalance
             // 
-            this.checkBalance.Location = new System.Drawing.Point(550, 458);
+            this.checkBalance.Location = new System.Drawing.Point(376, 692);
+            this.checkBalance.Margin = new System.Windows.Forms.Padding(2);
             this.checkBalance.Name = "checkBalance";
-            this.checkBalance.Size = new System.Drawing.Size(131, 37);
+            this.checkBalance.Size = new System.Drawing.Size(87, 24);
             this.checkBalance.TabIndex = 20;
             this.checkBalance.Text = "Check Balance";
             this.checkBalance.UseVisualStyleBackColor = true;
@@ -246,45 +272,119 @@
             // currentWalletLabel
             // 
             this.currentWalletLabel.AutoSize = true;
-            this.currentWalletLabel.Location = new System.Drawing.Point(40, 383);
+            this.currentWalletLabel.Location = new System.Drawing.Point(11, 645);
+            this.currentWalletLabel.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
             this.currentWalletLabel.Name = "currentWalletLabel";
-            this.currentWalletLabel.Size = new System.Drawing.Size(110, 20);
+            this.currentWalletLabel.Size = new System.Drawing.Size(74, 13);
             this.currentWalletLabel.TabIndex = 22;
             this.currentWalletLabel.Text = "Current Wallet";
             // 
             // transactionLabel
             // 
             this.transactionLabel.AutoSize = true;
-            this.transactionLabel.Location = new System.Drawing.Point(712, 170);
+            this.transactionLabel.Location = new System.Drawing.Point(483, 216);
+            this.transactionLabel.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
             this.transactionLabel.Name = "transactionLabel";
-            this.transactionLabel.Size = new System.Drawing.Size(100, 20);
+            this.transactionLabel.Size = new System.Drawing.Size(68, 13);
             this.transactionLabel.TabIndex = 23;
             this.transactionLabel.Text = "Transactions";
             // 
             // blocksLabel
             // 
             this.blocksLabel.AutoSize = true;
-            this.blocksLabel.Location = new System.Drawing.Point(715, 19);
+            this.blocksLabel.Location = new System.Drawing.Point(483, 46);
+            this.blocksLabel.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
             this.blocksLabel.Name = "blocksLabel";
-            this.blocksLabel.Size = new System.Drawing.Size(56, 20);
+            this.blocksLabel.Size = new System.Drawing.Size(39, 13);
             this.blocksLabel.TabIndex = 24;
             this.blocksLabel.Text = "Blocks";
             // 
             // validationLabel
             // 
             this.validationLabel.AutoSize = true;
-            this.validationLabel.Location = new System.Drawing.Point(715, 385);
+            this.validationLabel.Location = new System.Drawing.Point(489, 654);
+            this.validationLabel.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
             this.validationLabel.Name = "validationLabel";
-            this.validationLabel.Size = new System.Drawing.Size(79, 20);
+            this.validationLabel.Size = new System.Drawing.Size(53, 13);
             this.validationLabel.TabIndex = 25;
             this.validationLabel.Text = "Validation";
             // 
+            // newBlockSingleThread
+            // 
+            this.newBlockSingleThread.Location = new System.Drawing.Point(485, 61);
+            this.newBlockSingleThread.Margin = new System.Windows.Forms.Padding(2);
+            this.newBlockSingleThread.Name = "newBlockSingleThread";
+            this.newBlockSingleThread.Size = new System.Drawing.Size(197, 26);
+            this.newBlockSingleThread.TabIndex = 26;
+            this.newBlockSingleThread.Text = "Generate New Block (Single Thread)";
+            this.newBlockSingleThread.UseVisualStyleBackColor = true;
+            this.newBlockSingleThread.Click += new System.EventHandler(this.newBlockSingleThread_Click);
+            // 
+            // label1
+            // 
+            this.label1.AutoSize = true;
+            this.label1.Location = new System.Drawing.Point(482, 383);
+            this.label1.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
+            this.label1.Name = "label1";
+            this.label1.Size = new System.Drawing.Size(0, 13);
+            this.label1.TabIndex = 27;
+            // 
+            // GreedyButton
+            // 
+            this.GreedyButton.AutoSize = true;
+            this.GreedyButton.Checked = true;
+            this.GreedyButton.Location = new System.Drawing.Point(31, 19);
+            this.GreedyButton.Name = "GreedyButton";
+            this.GreedyButton.Size = new System.Drawing.Size(59, 17);
+            this.GreedyButton.TabIndex = 28;
+            this.GreedyButton.TabStop = true;
+            this.GreedyButton.Text = "Greedy";
+            this.GreedyButton.UseVisualStyleBackColor = true;
+            // 
+            // AltruisticButton
+            // 
+            this.AltruisticButton.AutoSize = true;
+            this.AltruisticButton.Location = new System.Drawing.Point(31, 42);
+            this.AltruisticButton.Name = "AltruisticButton";
+            this.AltruisticButton.Size = new System.Drawing.Size(64, 17);
+            this.AltruisticButton.TabIndex = 29;
+            this.AltruisticButton.TabStop = true;
+            this.AltruisticButton.Text = "Altruistic";
+            this.AltruisticButton.UseVisualStyleBackColor = true;
+            // 
+            // RandomButton
+            // 
+            this.RandomButton.AutoSize = true;
+            this.RandomButton.Location = new System.Drawing.Point(31, 65);
+            this.RandomButton.Name = "RandomButton";
+            this.RandomButton.Size = new System.Drawing.Size(65, 17);
+            this.RandomButton.TabIndex = 30;
+            this.RandomButton.TabStop = true;
+            this.RandomButton.Text = "Random";
+            this.RandomButton.UseVisualStyleBackColor = true;
+            // 
+            // groupBox1
+            // 
+            this.groupBox1.Controls.Add(this.GreedyButton);
+            this.groupBox1.Controls.Add(this.AltruisticButton);
+            this.groupBox1.Controls.Add(this.RandomButton);
+            this.groupBox1.Location = new System.Drawing.Point(485, 406);
+            this.groupBox1.Name = "groupBox1";
+            this.groupBox1.Size = new System.Drawing.Size(200, 94);
+            this.groupBox1.TabIndex = 32;
+            this.groupBox1.TabStop = false;
+            this.groupBox1.Text = "Mining Mode";
+            // 
             // BlockchainApp
             // 
-            this.AutoScaleDimensions = new System.Drawing.SizeF(9F, 20F);
+            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
             this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
             this.BackColor = System.Drawing.SystemColors.ActiveCaption;
-            this.ClientSize = new System.Drawing.Size(1022, 536);
+            this.ClientSize = new System.Drawing.Size(693, 726);
+            this.Controls.Add(this.groupBox1);
+            this.Controls.Add(this.label1);
+            this.Controls.Add(this.createTransaction);
+            this.Controls.Add(this.newBlockSingleThread);
             this.Controls.Add(this.validationLabel);
             this.Controls.Add(this.blocksLabel);
             this.Controls.Add(this.transactionLabel);
@@ -293,14 +393,13 @@
             this.Controls.Add(this.validate);
             this.Controls.Add(this.readPendingTransactions);
             this.Controls.Add(this.printBlockchain);
-            this.Controls.Add(this.newBlock);
+            this.Controls.Add(this.newBlockMultiThread);
             this.Controls.Add(this.reciever);
             this.Controls.Add(this.recieverKeyLabel);
             this.Controls.Add(this.fee);
             this.Controls.Add(this.amount);
             this.Controls.Add(this.feeLabel);
             this.Controls.Add(this.amountLabel);
-            this.Controls.Add(this.createTransaction);
             this.Controls.Add(this.validateKeys);
             this.Controls.Add(this.privateKey);
             this.Controls.Add(this.publicKey);
@@ -311,9 +410,10 @@
             this.Controls.Add(this.printBlock);
             this.Controls.Add(this.output);
             this.ForeColor = System.Drawing.Color.Black;
-            this.Margin = new System.Windows.Forms.Padding(4, 5, 4, 5);
             this.Name = "BlockchainApp";
             this.Text = "Blockchain App";
+            this.groupBox1.ResumeLayout(false);
+            this.groupBox1.PerformLayout();
             this.ResumeLayout(false);
             this.PerformLayout();
 
@@ -337,7 +437,7 @@
         private System.Windows.Forms.Label amountLabel;
         private System.Windows.Forms.TextBox reciever;
         private System.Windows.Forms.Label recieverKeyLabel;
-        private System.Windows.Forms.Button newBlock;
+        private System.Windows.Forms.Button newBlockMultiThread;
         private System.Windows.Forms.Button printBlockchain;
         private System.Windows.Forms.Button readPendingTransactions;
         private System.Windows.Forms.Button validate;
@@ -346,6 +446,12 @@
         private System.Windows.Forms.Label transactionLabel;
         private System.Windows.Forms.Label blocksLabel;
         private System.Windows.Forms.Label validationLabel;
+        private System.Windows.Forms.Button newBlockSingleThread;
+        private System.Windows.Forms.Label label1;
+        private System.Windows.Forms.RadioButton GreedyButton;
+        private System.Windows.Forms.RadioButton AltruisticButton;
+        private System.Windows.Forms.RadioButton RandomButton;
+        private System.Windows.Forms.GroupBox groupBox1;
     }
 }
 
diff --git a/BlockchainAssignment/BlockchainApp.cs b/BlockchainAssignment/BlockchainApp.cs
index 719e119..42cb903 100644
--- a/BlockchainAssignment/BlockchainApp.cs
+++ b/BlockchainAssignment/BlockchainApp.cs
@@ -84,27 +84,46 @@ namespace BlockchainAssignment
             UpdateText(transaction.ToString());
         }
 
-        /* BLOCK MANAGEMENT */
-        // Conduct Proof-of-work in order to mine transactions from the pool and submit a new block to the Blockchain
-        private void NewBlock_Click(object sender, EventArgs e)
+        private void newBlock(bool multithreaded)
         {
+
+            var mode = new MiningMode();
+            if (GreedyButton.Enabled)
+                mode = MiningMode.Greedy;
+            else if (AltruisticButton.Enabled)
+                mode = MiningMode.Altruistic;
+            else if (RandomButton.Enabled)
+                mode = MiningMode.Random;
+
             // Retrieve pending transactions to be added to the newly generated Block
-            List<Transaction> transactions = blockchain.GetPendingTransactions();
+            List<Transaction> transactions = blockchain.GetPendingTransactions(mode);
 
             // Create and append the new block - requires a reference to the previous block, a set of transactions and the miners public address (For the reward to be issued)
-            Block newBlock = new Block(blockchain.GetLastBlock(), transactions, publicKey.Text);
+            Block newBlock = new Block(blockchain.GetLastBlock(), transactions, publicKey.Text, multithreaded);
             blockchain.blocks.Add(newBlock);
 
             UpdateText(blockchain.ToString());
         }
 
+        /* BLOCK MANAGEMENT */
+        // Conduct Proof-of-work in order to mine transactions from the pool and submit a new block to the Blockchain
+        private void newBlockMultiThread_Click(object sender, EventArgs e)
+        {
+            newBlock(multithreaded: true);
+        }
+
+        private void newBlockSingleThread_Click(object sender, EventArgs e)
+        {
+            newBlock(multithreaded: false);
+        }
+
 
         /* BLOCKCHAIN VALIDATION */
         // Validate the integrity of the state of the Blockchain
         private void Validate_Click(object sender, EventArgs e)
         {
             // CASE: Genesis Block - Check only hash as no transactions are currently present
-            if(blockchain.blocks.Count == 1)
+            if (blockchain.blocks.Count == 1)
             {
                 if (!Blockchain.ValidateHash(blockchain.blocks[0])) // Recompute Hash to check validity
                     UpdateText("Blockchain is invalid");
@@ -113,9 +132,9 @@ namespace BlockchainAssignment
                 return;
             }
 
-            for (int i=1; i<blockchain.blocks.Count-1; i++)
+            for (int i = 1; i < blockchain.blocks.Count - 1; i++)
             {
-                if(
+                if (
                     blockchain.blocks[i].prevHash != blockchain.blocks[i - 1].hash || // Check hash "chain"
                     !Blockchain.ValidateHash(blockchain.blocks[i]) ||  // Check each blocks hash
                     !Blockchain.ValidateMerkleRoot(blockchain.blocks[i]) // Check transaction integrity using Merkle Root
@@ -127,5 +146,10 @@ namespace BlockchainAssignment
             }
             UpdateText("Blockchain is valid");
         }
+
+        private void label1_Click(object sender, EventArgs e)
+        {
+
+        }
     }
 }
\ No newline at end of file
diff --git a/BlockchainAssignment/BlockchainAssignment.csproj b/BlockchainAssignment/BlockchainAssignment.csproj
index e2a0582..bf051c7 100644
--- a/BlockchainAssignment/BlockchainAssignment.csproj
+++ b/BlockchainAssignment/BlockchainAssignment.csproj
@@ -55,6 +55,7 @@
       <DependentUpon>BlockchainApp.cs</DependentUpon>
     </Compile>
     <Compile Include="HashCode\HashTools.cs" />
+    <Compile Include="MiningMode.cs" />
     <Compile Include="Program.cs" />
     <Compile Include="Properties\AssemblyInfo.cs" />
     <Compile Include="Transaction.cs" />
diff --git a/BlockchainAssignment/BlockchainAssignment.sln b/BlockchainAssignment/BlockchainAssignment.sln
new file mode 100644
index 0000000..70bed0c
--- /dev/null
+++ b/BlockchainAssignment/BlockchainAssignment.sln
@@ -0,0 +1,24 @@
+Microsoft Visual Studio Solution File, Format Version 12.00
+# Visual Studio Version 17
+VisualStudioVersion = 17.5.2.0
+MinimumVisualStudioVersion = 10.0.40219.1
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "BlockchainAssignment", "BlockchainAssignment.csproj", "{4624A4F3-BE6D-6975-C6E3-5FB61AD8AD87}"
+EndProject
+Global
+	GlobalSection(SolutionConfigurationPlatforms) = preSolution
+		Debug|Any CPU = Debug|Any CPU
+		Release|Any CPU = Release|Any CPU
+	EndGlobalSection
+	GlobalSection(ProjectConfigurationPlatforms) = postSolution
+		{4624A4F3-BE6D-6975-C6E3-5FB61AD8AD87}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{4624A4F3-BE6D-6975-C6E3-5FB61AD8AD87}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{4624A4F3-BE6D-6975-C6E3-5FB61AD8AD87}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{4624A4F3-BE6D-6975-C6E3-5FB61AD8AD87}.Release|Any CPU.Build.0 = Release|Any CPU
+	EndGlobalSection
+	GlobalSection(SolutionProperties) = preSolution
+		HideSolutionNode = FALSE
+	EndGlobalSection
+	GlobalSection(ExtensibilityGlobals) = postSolution
+		SolutionGuid = {0124B5F0-1C52-49AE-846A-1D26485C0082}
+	EndGlobalSection
+EndGlobal
diff --git a/BlockchainAssignment/MiningMode.cs b/BlockchainAssignment/MiningMode.cs
new file mode 100644
index 0000000..a1a32d6
--- /dev/null
+++ b/BlockchainAssignment/MiningMode.cs
@@ -0,0 +1,15 @@
+ï»¿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+
+namespace BlockchainAssignment
+{
+    public enum MiningMode
+    {
+        Greedy,
+        Altruistic,
+        Random,
+    }
+}
diff --git a/BlockchainAssignment/Transaction.cs b/BlockchainAssignment/Transaction.cs
index cf92a2d..1a657d7 100644
--- a/BlockchainAssignment/Transaction.cs
+++ b/BlockchainAssignment/Transaction.cs
@@ -10,7 +10,7 @@ namespace BlockchainAssignment
     class Transaction
     {
         /* Transaction Variables */
-        DateTime timestamp; // Time of creation
+        public DateTime timestamp; // Time of creation
         public String senderAddress, recipientAddress; // Participants public key addresses
         public double amount, fee; // Quantities transferred
         public String hash, signature; // Attributes for verification of validity
@@ -52,7 +52,7 @@ namespace BlockchainAssignment
         // Represent a transaction as a string for output to UI
         public override string ToString()
         {
-            return "  [TRANSACTION START]" 
+            return "\n  [TRANSACTION START]" 
                 + "\n  Timestamp: " + timestamp
                 + "\n  -- Verification --"
                 + "\n  Hash: " + hash
@@ -63,7 +63,7 @@ namespace BlockchainAssignment
                 + "\n  -- Participants --"
                 + "\n  Sender: " + senderAddress
                 + "\n  Reciever: " + recipientAddress 
-                + "\n  [TRANSACTION END]";
+                + "\n  [TRANSACTION END]\n";
         }
     }
 }
diff --git a/Luke Wilson CS3BC Coursework.docx b/Luke Wilson CS3BC Coursework.docx
index 7922048..3011b4a 100644
--- a/Luke Wilson CS3BC Coursework.docx	
+++ b/Luke Wilson CS3BC Coursework.docx	
@@ -1,4 +1,9 @@
-
+Module Code: CS3BC
+Assignment report Title: Blockchain Coursework Assignment
+Student Number: 30002734
+Date (when the work was completed): 
+Actual hrs spent for the assignment:
+Which Artificial Intelligence tools used (if applicable):
 
 Part 1:
 
